import { mutation, internalMutation } from '../_generated/server';
import { v } from 'convex/values';

export const internalConnectSocialAccount = internalMutation({
  args: {
    userId: v.string(),
    platform: v.union(v.literal('twitter'), v.literal('instagram'), v.literal('tiktok')),
    platformUserId: v.string(),
    platformUsername: v.optional(v.string()),
    accessToken: v.optional(v.string()),
    refreshToken: v.optional(v.string()),
    tokenExpiresAt: v.optional(v.number()),
    metadata: v.optional(v.any()),
  },
  handler: async (ctx, args) => {
    const existing = await ctx.db
      .query('socialConnections')
      .withIndex('byUserPlatform', (q) => 
        q.eq('userId', args.userId).eq('platform', args.platform)
      )
      .unique();

    const now = Date.now();
    
    if (existing) {
      await ctx.db.patch(existing._id, {
        platformUserId: args.platformUserId,
        platformUsername: args.platformUsername,
        accessToken: args.accessToken,
        refreshToken: args.refreshToken,
        tokenExpiresAt: args.tokenExpiresAt,
        connectionStatus: 'active',
        lastSyncAt: now,
        errorMessage: undefined,
        metadata: args.metadata,
        updatedAt: now,
      });
      return existing._id;
    } else {
      return await ctx.db.insert('socialConnections', {
        userId: args.userId,
        platform: args.platform,
        platformUserId: args.platformUserId,
        platformUsername: args.platformUsername,
        accessToken: args.accessToken,
        refreshToken: args.refreshToken,
        tokenExpiresAt: args.tokenExpiresAt,
        connectionStatus: 'active',
        lastSyncAt: now,
        metadata: args.metadata,
        createdAt: now,
        updatedAt: now,
      });
    }
  },
});

export const internalMarkConnectionError = internalMutation({
  args: {
    userId: v.string(),
    platform: v.union(v.literal('twitter'), v.literal('instagram'), v.literal('tiktok')),
    errorMessage: v.string(),
  },
  handler: async (ctx, args) => {
    const connection = await ctx.db
      .query('socialConnections')
      .withIndex('byUserPlatform', (q) => 
        q.eq('userId', args.userId).eq('platform', args.platform)
      )
      .unique();

    if (connection) {
      await ctx.db.patch(connection._id, {
        connectionStatus: 'error',
        errorMessage: args.errorMessage,
        updatedAt: Date.now(),
      });
    }
  },
});

export const cleanupUserConnections = internalMutation({
  args: {
    clerkUserId: v.string(),
  },
  handler: async (ctx, args) => {
    const connections = await ctx.db
      .query('socialConnections')
      .withIndex('byUser', (q) => q.eq('userId', args.clerkUserId))
      .collect();

    let cleaned = 0;
    for (const connection of connections) {
      await ctx.db.delete(connection._id);
      cleaned++;
    }

    const appleConnections = await ctx.db
      .query('appleIdConnections')
      .withIndex('byUser', (q) => q.eq('userId', args.clerkUserId))
      .collect();

    for (const connection of appleConnections) {
      await ctx.db.delete(connection._id);
      cleaned++;
    }

    return { cleaned };
  },
});